// Generated by gencpp from file scara_inverse_kinematics/poseJointsRequest.msg
// DO NOT EDIT!


#ifndef SCARA_INVERSE_KINEMATICS_MESSAGE_POSEJOINTSREQUEST_H
#define SCARA_INVERSE_KINEMATICS_MESSAGE_POSEJOINTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scara_inverse_kinematics
{
template <class ContainerAllocator>
struct poseJointsRequest_
{
  typedef poseJointsRequest_<ContainerAllocator> Type;

  poseJointsRequest_()
    : r11(0.0)
    , r12(0.0)
    , r13(0.0)
    , r21(0.0)
    , r22(0.0)
    , r23(0.0)
    , r31(0.0)
    , r32(0.0)
    , r33(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
    }
  poseJointsRequest_(const ContainerAllocator& _alloc)
    : r11(0.0)
    , r12(0.0)
    , r13(0.0)
    , r21(0.0)
    , r22(0.0)
    , r23(0.0)
    , r31(0.0)
    , r32(0.0)
    , r33(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
  (void)_alloc;
    }



   typedef double _r11_type;
  _r11_type r11;

   typedef double _r12_type;
  _r12_type r12;

   typedef double _r13_type;
  _r13_type r13;

   typedef double _r21_type;
  _r21_type r21;

   typedef double _r22_type;
  _r22_type r22;

   typedef double _r23_type;
  _r23_type r23;

   typedef double _r31_type;
  _r31_type r31;

   typedef double _r32_type;
  _r32_type r32;

   typedef double _r33_type;
  _r33_type r33;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct poseJointsRequest_

typedef ::scara_inverse_kinematics::poseJointsRequest_<std::allocator<void> > poseJointsRequest;

typedef boost::shared_ptr< ::scara_inverse_kinematics::poseJointsRequest > poseJointsRequestPtr;
typedef boost::shared_ptr< ::scara_inverse_kinematics::poseJointsRequest const> poseJointsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator1> & lhs, const ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.r11 == rhs.r11 &&
    lhs.r12 == rhs.r12 &&
    lhs.r13 == rhs.r13 &&
    lhs.r21 == rhs.r21 &&
    lhs.r22 == rhs.r22 &&
    lhs.r23 == rhs.r23 &&
    lhs.r31 == rhs.r31 &&
    lhs.r32 == rhs.r32 &&
    lhs.r33 == rhs.r33 &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator1> & lhs, const ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scara_inverse_kinematics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70a12bf1f2d02af123ce0de58d137cf7";
  }

  static const char* value(const ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70a12bf1f2d02af1ULL;
  static const uint64_t static_value2 = 0x23ce0de58d137cf7ULL;
};

template<class ContainerAllocator>
struct DataType< ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scara_inverse_kinematics/poseJointsRequest";
  }

  static const char* value(const ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 r11\n"
"float64 r12\n"
"float64 r13\n"
"float64 r21\n"
"float64 r22\n"
"float64 r23\n"
"float64 r31\n"
"float64 r32\n"
"float64 r33\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r11);
      stream.next(m.r12);
      stream.next(m.r13);
      stream.next(m.r21);
      stream.next(m.r22);
      stream.next(m.r23);
      stream.next(m.r31);
      stream.next(m.r32);
      stream.next(m.r33);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct poseJointsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scara_inverse_kinematics::poseJointsRequest_<ContainerAllocator>& v)
  {
    s << indent << "r11: ";
    Printer<double>::stream(s, indent + "  ", v.r11);
    s << indent << "r12: ";
    Printer<double>::stream(s, indent + "  ", v.r12);
    s << indent << "r13: ";
    Printer<double>::stream(s, indent + "  ", v.r13);
    s << indent << "r21: ";
    Printer<double>::stream(s, indent + "  ", v.r21);
    s << indent << "r22: ";
    Printer<double>::stream(s, indent + "  ", v.r22);
    s << indent << "r23: ";
    Printer<double>::stream(s, indent + "  ", v.r23);
    s << indent << "r31: ";
    Printer<double>::stream(s, indent + "  ", v.r31);
    s << indent << "r32: ";
    Printer<double>::stream(s, indent + "  ", v.r32);
    s << indent << "r33: ";
    Printer<double>::stream(s, indent + "  ", v.r33);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARA_INVERSE_KINEMATICS_MESSAGE_POSEJOINTSREQUEST_H
