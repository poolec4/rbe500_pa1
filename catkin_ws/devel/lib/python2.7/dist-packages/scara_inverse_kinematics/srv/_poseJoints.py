# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from scara_inverse_kinematics/poseJointsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class poseJointsRequest(genpy.Message):
  _md5sum = "70a12bf1f2d02af123ce0de58d137cf7"
  _type = "scara_inverse_kinematics/poseJointsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 r11
float64 r12
float64 r13
float64 r21
float64 r22
float64 r23
float64 r31
float64 r32
float64 r33
float64 x
float64 y
float64 z
"""
  __slots__ = ['r11','r12','r13','r21','r22','r23','r31','r32','r33','x','y','z']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       r11,r12,r13,r21,r22,r23,r31,r32,r33,x,y,z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(poseJointsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.r11 is None:
        self.r11 = 0.
      if self.r12 is None:
        self.r12 = 0.
      if self.r13 is None:
        self.r13 = 0.
      if self.r21 is None:
        self.r21 = 0.
      if self.r22 is None:
        self.r22 = 0.
      if self.r23 is None:
        self.r23 = 0.
      if self.r31 is None:
        self.r31 = 0.
      if self.r32 is None:
        self.r32 = 0.
      if self.r33 is None:
        self.r33 = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
    else:
      self.r11 = 0.
      self.r12 = 0.
      self.r13 = 0.
      self.r21 = 0.
      self.r22 = 0.
      self.r23 = 0.
      self.r31 = 0.
      self.r32 = 0.
      self.r33 = 0.
      self.x = 0.
      self.y = 0.
      self.z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.r11, _x.r12, _x.r13, _x.r21, _x.r22, _x.r23, _x.r31, _x.r32, _x.r33, _x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.r11, _x.r12, _x.r13, _x.r21, _x.r22, _x.r23, _x.r31, _x.r32, _x.r33, _x.x, _x.y, _x.z,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.r11, _x.r12, _x.r13, _x.r21, _x.r22, _x.r23, _x.r31, _x.r32, _x.r33, _x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.r11, _x.r12, _x.r13, _x.r21, _x.r22, _x.r23, _x.r31, _x.r32, _x.r33, _x.x, _x.y, _x.z,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from scara_inverse_kinematics/poseJointsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class poseJointsResponse(genpy.Message):
  _md5sum = "9890b1bf53393af30e276affd5468a4b"
  _type = "scara_inverse_kinematics/poseJointsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 theta1
float64 theta2
float64 d3

"""
  __slots__ = ['theta1','theta2','d3']
  _slot_types = ['float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       theta1,theta2,d3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(poseJointsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.theta1 is None:
        self.theta1 = 0.
      if self.theta2 is None:
        self.theta2 = 0.
      if self.d3 is None:
        self.d3 = 0.
    else:
      self.theta1 = 0.
      self.theta2 = 0.
      self.d3 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.theta1, _x.theta2, _x.d3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.theta1, _x.theta2, _x.d3,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.theta1, _x.theta2, _x.d3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.theta1, _x.theta2, _x.d3,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class poseJoints(object):
  _type          = 'scara_inverse_kinematics/poseJoints'
  _md5sum = '998f1ed04f61522c2efafb2090670f73'
  _request_class  = poseJointsRequest
  _response_class = poseJointsResponse
